generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model appointment {
  id               String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  date             DateTime      @db.Date
  time             DateTime      @db.Time(6)
  status           String        @db.VarChar(20)
  user_id          String        @db.Uuid
  organization_id  String        @db.Uuid
  medical_staff_id String        @db.Uuid
  created_at       DateTime      @default(now()) @db.Timestamp(6)
  updated_at       DateTime      @default(now()) @db.Timestamp(6)
  medical_staff    medical_staff @relation(fields: [medical_staff_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  organization     organization  @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user             user          @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model it_support {
  id              String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  expertise       String       @db.VarChar(50)
  availability    String?      @db.VarChar(50)
  user_id         String       @db.Uuid
  organization_id String       @db.Uuid
  created_at      DateTime     @default(now()) @db.Timestamp(6)
  updated_at      DateTime     @default(now()) @db.Timestamp(6)
  organization    organization @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user            user         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model medical_staff {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  specialization  String        @db.VarChar(50)
  experience      Int?
  qualification   String?       @db.VarChar(100)
  availability    String?       @db.VarChar(50)
  user_id         String        @db.Uuid
  organization_id String        @db.Uuid
  created_at      DateTime      @default(now()) @db.Timestamp(6)
  updated_at      DateTime      @default(now()) @db.Timestamp(6)
  appointment     appointment[]
  organization    organization  @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user            user          @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model office_manager {
  id              String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  responsibility  String       @db.VarChar(50)
  user_id         String       @db.Uuid
  organization_id String       @db.Uuid
  created_at      DateTime     @default(now()) @db.Timestamp(6)
  updated_at      DateTime     @default(now()) @db.Timestamp(6)
  organization    organization @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user            user         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model organization {
  id             String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description    String?          @db.VarChar
  address        String?          @db.VarChar(100)
  city           String?          @db.VarChar(50)
  state          String?          @db.VarChar(50)
  zip_code       String?          @db.VarChar(10)
  name           String           @db.VarChar(255)
  created_at     DateTime         @default(now()) @db.Timestamp(6)
  updated_at     DateTime         @default(now()) @db.Timestamp(6)
  user_id        String           @db.Uuid
  tenant_id      String           @db.VarChar(255)
  appointment    appointment[]
  it_support     it_support[]
  medical_staff  medical_staff[]
  office_manager office_manager[]
  user           user             @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id             String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email          String           @unique @db.VarChar(255)
  firstName      String?          @db.VarChar(255)
  lastName       String?          @db.VarChar(255)
  roq_user_id    String           @db.VarChar(255)
  tenant_id      String           @db.VarChar(255)
  created_at     DateTime         @default(now()) @db.Timestamp(6)
  updated_at     DateTime         @default(now()) @db.Timestamp(6)
  appointment    appointment[]
  it_support     it_support[]
  medical_staff  medical_staff[]
  office_manager office_manager[]
  organization   organization[]
}
